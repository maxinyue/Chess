group = 'cn.maxinyue'
version = '0.0.1-SNAPSHOT'
buildscript {
    repositories {
        mavenRepo url: 'http://localhost:8081/nexus/content/groups/public/';
        //    mavenRepo url: 'http://132.147.68.178:8081/nexus/content/groups/public/';
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.9.0'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
        classpath "com.googlecode.flyway:flyway-gradle-plugin:2.2.1"
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}
// Invoke the plugin
apply plugin: 'js'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'fatjar'
apply plugin: 'flyway'
apply plugin: 'war'
apply plugin: 'gradle-one-jar'

idea {
    project {
        languageLevel = '1.7'
        ipr.withXml { provider ->
            provider.node.component.find {
                it.@name == 'VcsDirectoryMappings'
            }.mapping.@vcs = 'Git'
        }
    }
}
sourceSets {
    main {
        resources {
            srcDirs += 'src/main/webapp'
        }
    }
}

flyway {
    user = 'sa'
    password = ''
    driver = 'org.h2.Driver'
    url = 'jdbc:h2:tcp://localhost/c:/h2data/test'
}
sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'



task awesomeFunJar(type: OneJar) {
    mainClass = 'cn.maxinyue.Laucher'
    archiveName = 'chess.jar'
    oneJarConfiguration  = configurations.compile
}

fatJar {
    baseName = 'chess'
    manifest {
        attributes 'Main-Class': 'cn.maxinyue.Laucher'
    }
    exclude 'META-INF/MANIFEST.MF', '**/*.RSA', '**/*.SF', '**/*.DSA', 'license/*.txt'
}
javascript.source {
    dev {
        js {
            srcDir jsSrcDir
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir jsSrcDir
            include "*.min.js"
        }
    }
}

dependencies {
    compile "javax.websocket:javax.websocket-api:1.0"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "org.slf4j:slf4j-api:1.7.5"
//    compile "org.eclipse.persistence:javax.persistence:2.1.0"
    compile "javax.ws.rs:javax.ws.rs-api:2.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.2.0"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.2.0"
    compile "com.fasterxml.jackson.core:jackson-core:2.2.0"
    compile "org.glassfish.hk2.external:javax.inject:2.2.0"
    compile "org.glassfish.main.extras:glassfish-embedded-all:4.0"
    compile 'org.hibernate:hibernate-entitymanager:4.3.1.Final'
    compile 'com.h2database:h2:1.3.175'
    compile "com.googlecode.flyway:flyway-core:2.2.1"
    testCompile "junit:junit:4.10"
//    runtime "ch.qos.logback:logback-classic:1.0.13"
//    runtime "ch.qos.logback:logback-core:1.1.0"
//    runtime "org.slf4j:jul-to-slf4j:1.7.5"
}

jar {
    manifest{
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(' ')
        attributes 'Class-Path': manifestClasspath
        attributes 'Main-Class': 'cn.maxinyue.Laucher'
    }
}

repositories {
    mavenRepo url: 'http://localhost:8081/nexus/content/groups/public/';
    //    mavenRepo url: 'http://132.147.68.178:8081/nexus/content/groups/public/';
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyFileToDir(type: Copy) {
    from 'src/main/webapp'
    into "$buildDir/libs"
}

war {
    baseName = "chess"
}